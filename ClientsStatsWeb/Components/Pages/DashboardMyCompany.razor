@page "/Dashboard/mycompany"
@layout DashboardLayout

@inject Firebase.Database.FirebaseClient FirebaseClient
@rendermode InteractiveServer

<PageTitle>Companies Dashboard</PageTitle>

<style>
    body {
    font-family: 'Roboto', sans-serif; /* Modern font */
    background-color: #f4f7fa;
    }

    h1 {
    text-align: center;
    color: #0056b3;
    font-size: 2.5em;
    margin-bottom: 1em;
    }

    .centered-title {
    text-align: center;
    text-shadow: 3px 3px 6px rgba(0, 0, 139, 0.3); /* Softer shadow */
    color: #0056b3; /* Slightly darker blue for better readability */
    font-size: 3em;
    font-weight: 700; /* Bold for emphasis */
    margin-bottom: 1.5em;
    letter-spacing: 1px; /* Slight spacing for elegance */
    }

    table {
    width: 100%;
    border-collapse: collapse;
    margin: 0 auto;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
    }

    tr {
    border-bottom: 1px solid #ddd;
    }

    td {
    padding: 20px;
    vertical-align: top;
    }

    .company-name {
    color: #111111; /* Distinctive color for company name */
    font-family: 'Montserrat', sans-serif; /* Different modern font */
    font-size: 2em;
    margin-bottom: 0.5em;
    }

    .info-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .info-container img {
    max-width: 48%; /* Adjusted to fit side by side */
    height: auto;
    display: block;
    margin: 0 auto;
    border-radius: 5px;
    }

    .details {
    margin-top: 1em;
    text-align: center;
    }

    h3 {
    color: #333;
    font-size: 1.5em;
    margin-bottom: 0.5em;
    }

    h4 {
    color: #555;
    font-size: 1.2em;
    margin-top: 1em;
    margin-bottom: 0.5em;
    }

    p {
    text-align: center;
    font-size: 1.2em;
    color: #888;
    }
</style>

<h1 class="centered-title">My company</h1>

@if (companyPaymentData.Count > 0)
{
    <table>
        @foreach (var company in companyPaymentData)
        {
            if (!company.Key.Contains("Latam Airlines")) continue;

            <tr>
                <td>
                    <div class="company-name">@company.Key</div>
                    <div class="info-container">
                        <img src="@companyQuickChartUrls[company.Key]" alt="Payment Methods Chart for @company.Key" />
                        <img src="@($"/data/maps/{company.Key}_latam_map.png")" alt="LATAM Country Map for @company.Key" />
                    </div>
                    <div class="details">
                        <h3>Total Dissatisfied Clients: @companyInsatisfiedClients[company.Key]</h3>
                        <h3>Incoming redirected users: @companyRedirectedUsers[company.Key]</h3>
                    </div>
                </td>
            </tr>
        }
    </table>
}
else
{
    <p>Loading data...</p>
}

@code {
    private Dictionary<string, Dictionary<string, int>> companyPaymentData = new();
    private Dictionary<string, string> companyQuickChartUrls = new();
    private Dictionary<string, int> companyInsatisfiedClients = new(); // Stores dissatisfied clients count
    private Dictionary<string, int> companyRedirectedUsers = new(); // Stores redirected users count

    // Define the Company class
    private class Company
    {
        public Dictionary<string, string>? payment_methods { get; set; } // Payment method with user count
        public Dictionary<string, string>? locations { get; set; }
        public int number_of_redirected_users { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing component...");
        await FetchCompanyPaymentData();
    }

    private async Task FetchCompanyPaymentData()
    {
        try
        {
            var companies = await FirebaseClient.Child("companies2").OnceAsync<Company>();

            if (companies == null || !companies.Any())
            {
                Console.WriteLine("Firebase data is null or empty.");
                return;
            }

            foreach (var company in companies)
            {
                var companyName = company.Key;
                var companyObj = company.Object;
                
                if (companyObj.payment_methods == null) continue;

                if (!companyPaymentData.ContainsKey(companyName))
                    companyPaymentData[companyName] = new Dictionary<string, int>();

                int totalDissatisfiedClients = 0; // Calculate total dissatisfied clients from payment methods

                foreach (var method in companyObj.payment_methods)
                {
                    int methodCount = int.Parse(method.Value);
                    companyPaymentData[companyName][method.Key] = methodCount;
                    totalDissatisfiedClients += methodCount; // Sum up payment method counts
                }

                // Store the calculated value instead of fetching from Firebase
                companyInsatisfiedClients[companyName] = totalDissatisfiedClients;

                companyRedirectedUsers[companyName] = companyObj.number_of_redirected_users;
            }

            GenerateCompanyChartUrls();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Firebase data: {ex.Message}");
        }
    }

    private void GenerateCompanyChartUrls()
    {
        if (companyPaymentData.Count == 0) return;

        var colors = new List<string> { "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40" };

        foreach (var company in companyPaymentData)
        {
            var labels = string.Join(",", company.Value.Keys.Select(k => $"\"{k}\""));
            var data = string.Join(",", company.Value.Values);
            var colorSet = string.Join(",", company.Value.Keys.Select((_, i) => $"\"{colors[i % colors.Count]}\""));

            var chartJson = $@"{{
                type:'bar',
                data:{{
                    labels:[{labels}],
                    datasets:[{{
                        label:'Payment Methods for {company.Key}',
                        data:[{data}],
                        backgroundColor:[{colorSet}]
                    }}]
                }},
                options:{{
                    scales:{{
                        y:{{
                            beginAtZero:true,  // Ensures y-axis starts at 0
                            ticks:{{
                                stepSize: 1
                            }}
                        }}
                    }}
                }}
            }}";

            companyQuickChartUrls[company.Key] = $"https://quickchart.io/chart?c={System.Web.HttpUtility.UrlEncode(chartJson)}";
        }
    }
}
