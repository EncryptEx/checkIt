@page "/Dashboard/companies2"
@layout DashboardLayout

@inject Firebase.Database.FirebaseClient FirebaseClient
@rendermode InteractiveServer

<PageTitle>Companies Dashboard</PageTitle>

<h1>Payment Methods by Company</h1>

@if (companyPaymentData.Count > 0)
{
    @foreach (var company in companyPaymentData)
    {
        <h3>@company.Key</h3>
        <img src="@companyQuickChartUrls[company.Key]" alt="Payment Methods Chart for @company.Key" />
    }
}
else
{
    <p>Loading data...</p>
}

@code {
    
    private Dictionary<string, Dictionary<string, int>> companyPaymentData = new();
    private Dictionary<string, string> companyQuickChartUrls = new();

    // Define the Company class
    private class Company
    {
        public Dictionary<string, string>? payment_methods { get; set; } // Payment method with user count
        public string? num_clients_insatisfied { get; set; }
        public Dictionary<string, string>? locations { get; set; }
    }

  
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing component...");
        await FetchCompanyPaymentData();
    }

    private async Task FetchCompanyPaymentData()
    {
        try
        {
            var companies = await FirebaseClient.Child("companies2").OnceAsync<Company>();

             if (companies == null || !companies.Any())
            {
                Console.WriteLine("Firebase data is null or empty.");
                return;
            }

            foreach (var company in companies)
            {
                var companyName = company.Key;
                var paymentMethods = company.Object.payment_methods;

                if (paymentMethods == null) continue;

                if (!companyPaymentData.ContainsKey(companyName))
                    companyPaymentData[companyName] = new Dictionary<string, int>();

                foreach (var method in paymentMethods)
                {
                    companyPaymentData[companyName][method.Key] = int.Parse(method.Value);
                }
            }

            GenerateCompanyChartUrls();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Firebase data: {ex.Message}");
        }
    }

    private void GenerateCompanyChartUrls()
    {
        if (companyPaymentData.Count == 0) return;

        var colors = new List<string> { "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40" };

        foreach (var company in companyPaymentData)
        {
            var labels = string.Join(",", company.Value.Keys.Select(k => $"\"{k}\""));
            var data = string.Join(",", company.Value.Values);
            var colorSet = string.Join(",", company.Value.Keys.Select((_, i) => $"\"{colors[i % colors.Count]}\""));

            var chartJson = $@"{{
                type:'bar',
                data:{{
                    labels:[{labels}],
                    datasets:[{{
                        label:'Payment Methods for {company.Key}',
                        data:[{data}],
                        backgroundColor:[{colorSet}]
                    }}]
                }},
                options:{{
                    scales:{{
                        y:{{
                            beginAtZero:true,
                            ticks:{{
                                stepSize: 1
                            }}
                        }}
                    }}
                }}
            }}";

            companyQuickChartUrls[company.Key] = $"https://quickchart.io/chart?c={System.Web.HttpUtility.UrlEncode(chartJson)}";
        }
    }
}
