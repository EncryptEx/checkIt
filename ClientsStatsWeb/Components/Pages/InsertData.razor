@page "/insert-data"
@using Newtonsoft.Json
@using Firebase.Database.Query
@rendermode InteractiveServer
@inject Firebase.Database.FirebaseClient FirebaseClient


<h3>Send Bulk Data to Firebase</h3>

<button @onclick="SendBulkData">Submit users & companies old</button>
<button @onclick="SendCompanies">Submit companies</button>

<p>@message</p>

@code {
    private string message = "";

    private async Task SendBulkData()
    {
        Console.WriteLine("Reading JSON file...");

        try
        {
            // Read JSON file (Ensure it's in "wwwroot/data/users1.json")    // Change the number to put the data needed
            string filePath = Path.Combine("wwwroot", "data", "users3.json");
            string jsonData = await File.ReadAllTextAsync(filePath);

            // Deserialize JSON into Dictionary
            Dictionary<string, User>? usersData = JsonConvert.DeserializeObject<Dictionary<string, User>>(jsonData);
            

            // Ensure data exists
            if (usersData == null || usersData.Count == 0)
            {
                message = "No users found in JSON file.";
                return;
            }

            // Loop through each user and send to Firebase
            foreach (var user in usersData)
            {
                await FirebaseClient
                    .Child("users")
                    .Child(user.Key)
                    .PutAsync(JsonConvert.SerializeObject(user.Value)); // Serializing object   (put if it exists, update if not create)
            }

            message = "All users inserted successfully!";



              // Read Companies JSON
            string companiesFilePath = Path.Combine("wwwroot", "data", "companies.json");
            string companiesJsonData = await File.ReadAllTextAsync(companiesFilePath);
            Dictionary<string, CompanyOld>? companiesData = JsonConvert.DeserializeObject<Dictionary<string, CompanyOld>>(companiesJsonData);

            // Ensure companies data exists
            if (companiesData == null || companiesData.Count == 0)
            {
                message = "No companies found in JSON file.";
                return;
            }

            // Insert companies into Firebase
            foreach (var company in companiesData)
            {
                await FirebaseClient
                    .Child("companies")
                    .Child(company.Key)
                    .PutAsync(JsonConvert.SerializeObject(company.Value));
            }

            message = "All companies inserted successfully!";



        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }

        Console.WriteLine("\nFinished inserting elements from JSON");


        StateHasChanged(); // Ensure UI updates
    }


    private async Task SendCompanies()
    {
        Console.WriteLine("Reading companies JSON file...");

        try
        {
             // Read Companies JSON File
            string companiesFilePath = Path.Combine("wwwroot", "data", "companies2.json");
            string companiesJsonData = await File.ReadAllTextAsync(companiesFilePath);
            Dictionary<string, Company>? companiesData = JsonConvert.DeserializeObject<Dictionary<string, Company>>(companiesJsonData);

            if (companiesData == null || companiesData.Count == 0)
            {
                message = "No companies found in JSON file.";
                return;
            }

            // Insert Companies into Firebase
            foreach (var company in companiesData)
            {
                await FirebaseClient
                    .Child("companies2")
                    .Child(company.Key)
                    .PutAsync(JsonConvert.SerializeObject(company.Value));
            }

            message = "All companies inserted successfully!";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }

        Console.WriteLine("\nFinished inserting elements from JSON");


        StateHasChanged(); // Ensure UI updates
    }


    // Define the User class
    private class User
    {
        public string? Name { get; set; }
        public List<string>? payment_methods { get; set; }
    }

     private class CompanyOld
    {
        public List<User>? users { get; set; }
    }

    // Define the Company class
    private class Company
    {
        public Dictionary<string, string>? payment_methods { get; set; } // Payment method with user count
        public string? num_clients_insatisfied { get; set; }
        public Dictionary<string, string>? locations { get; set; }
    }

}
